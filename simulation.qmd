# Simulation

```{r}
#| label: librariesSim

library(FAdist)
library(getPrepareWBData)
library(ggpubr)
library(tidyverse)
```

Functions to generate and plot flow time series and empirical cumulative distribution plots using a 2-parameter kappa function
```{r}
#| label: flowFunctions 

getStreamFlow <- function(n, shape, scale) {
  if (n <= 0) stop("n must be a positive integer")

  stream_flow_values <- rkappa(n = n, shape = shape, scale = scale)
  ts(stream_flow_values)
}


plotFlows <- function(params)
  #  nIn = 1000, shapeIn = 1.5, scaleIn = 2) 
  {
  flowTS <- getStreamFlow(params$n, params$shape, params$scale)
  flowDF <- data.frame(t = 1:params$n, flow = flowTS)
  
  # Convert time series data to a data frame for ggplot
  if(params$logECDF) {
    ecdfDF <- data.frame(value = as.vector(log10(flowTS)), n = params$n, shape = params$shape, scale = params$scale)
  } else {
    ecdfDF <- data.frame(value = as.vector(flowTS), n = params$n, shape = params$shape, scale = params$scale)
  }
  # Plot the ECDF using ggplot2
  # 
  gFlow <- ggplot(flowDF, aes(t, flow)) +
    geom_line() +
    labs(
      x = "Time", 
      y = "Steam flow"
    ) +
    theme_publication()
  # 
  gECDF <- ggplot(ecdfDF, aes(x = value)) +
    stat_ecdf(geom = "step") +
    labs(
      x = "Stream flow",
      y = "ECDF"
    ) +
    geom_text(
      aes(x = min(value) + (max(value) - min(value)) * 0.33, y = 0.95), 
      label = paste0("shape = ", params$shape, ", scale = ", params$scale)
    ) +
    theme_publication()
  
  return(
    list(
      plots = ggarrange(gFlow, gECDF),
      flow = flowDF,
      ecdf = ecdfDF
    )
  )
}
```

## Explore params  
Smaller shape = more extreme flows  
Smaller scale = lower flows
```{r}
#| label: plotFlows1_1 

params <- list(
  n = 500,
  shape = 1,
  scale = 1,
  logECDF = TRUE
)

d_1_1 <- plotFlows(params)
d_1_1$plots
```


```{r}
#| label: plotFlows15_2

params <- list(
  n = 500,
  shape = 1.5,
  scale = 2,
  logECDF = TRUE
)

d_15_2 <- plotFlows(params)
d_15_2$plots
```

```{r}
#| label: plotFlows25_1 

params <- list(
  n = 500,
  shape = 2.5,
  scale = 1,
  logECDF = TRUE
)

d_25_1 <- plotFlows(params)
d_25_1$plots
```


```{r}
#| label: plotFlows5_05

params <- list(
  n = 500,
  shape = 5,
  scale = .5,
  logECDF = TRUE
)

d_5_05 <- plotFlows(params)
d_5_05$plots
```

## Two distributions  
Assume the FPE scores follow the d_1_1 distribution. Generate df for ecdf and scale from 0-100.  
Assume we have absolute flow values as in d_15_2.   
```{r}
#| label: getECDF_FPE
#| 
fn_ecdf <- ecdf(d_1_1$ecdf$value)

relFlow <- data.frame(
  value = d_1_1$ecdf$value, 
  ecdf = fn_ecdf(d_1_1$ecdf$value)
  ) |> 
  mutate(
    value0_100 = (value - min(value)) / (max(value) - min(value))
  )

gRelFlow <- ggplot(relFlow, aes(value0_100, ecdf)) +
  geom_point() +
  labs(x = "Relative flow from FPE scores") +
  theme_publication()

```

Now we want to convert the x-axis values to actual (absolute) flow values. What is the minimum number of absolute flow observations we need to do a good job transferring the FPE relative flow scores to absolute flow?  
```{r}
#| label: convertRelAbs

ggarrange(gRelFlow, d_15_2$plots)
```

