
```{r}
#| label: libraries_real

library(FAdist)
library(fitdistrplus)
library(getPrepareWBData)
library(ggpubr)
library(moments)
library(lmomco)
library(MASS)
library(tidyverse)
```


# Real data 
#### Functions
```{r}
#| label: functions


getECDF <- function(d) {
  fn <- ecdf(d)
  fn(d)
}

estimate_kappa_params <- function(data) {
  mu <- mean(data, na.rm = TRUE)
  sigma <- sd(data, na.rm = TRUE)
  skewness <- skewness(data, na.rm = TRUE)
  kurtosis <- kurtosis(data, na.rm = TRUE)
  
  kappa_params <- c(mu, sigma, skewness, kurtosis)
  #kappa_params <- c(skewness, kurtosis, sigma, mu)
  
  return(kappa_params)
}

# Function to standardize data using the 4-parameter kappa distribution without ECDF# doesn't work
standardize_data_kappa <- function(data) {
  kappa_params <- estimate_kappa_params(data)
  standardized_values <- pkappa4(data, kappa_params[1], kappa_params[2],
                                       kappa_params[3], kappa_params[4])
  
  return(standardized_values)
}

pkappa4_ben <- function (q, shape1, shape2, scale = 1, location = 0, lower.tail = TRUE, log.p = FALSE) {
    Fx <- (1 - shape2 * (1 - shape1/scale * (q - location))^(1/shape1))^(1/shape2)
    if (!lower.tail) 
        Fx <- 1 - Fx
    if (log.p) 
        Fx <- log(Fx)
    return(Fx)
}




```


## Get data  
Import and manipulate data from FPE.  
Manipulation includes scaling (z-score) the **absolute flow** (`flow_cfs`) and the image-based **score** from the ML model in FPE, and developing  empirical distribution curves for both the raw and the scaled values.
```{r}
#| label: getRealData


d <- read.csv('./data/in/concatenated_predictions.csv') |> 
  mutate(flow_cfs_log10 = log10(flow_cfs))

#Get ECDF for each station
#
dG <- d |> 
  filter(!is.na(flow_cfs_log10)) |> 
  group_by(station_name) |> 
  mutate(
    flow_cfs_log10_ecdf = getECDF(flow_cfs_log10),
  
    flow_cfs_log10_scaled = scale(flow_cfs_log10), 
    flow_cfs_log10_scaled_ecdf = getECDF(flow_cfs_log10_scaled),
    
    #flow_cfs_log10_scaled_kappa = standardize_data_kappa(flow_cfs_log10), 
    #flow_cfs_log10_scaled_kappa_ecdf = getECDF(flow_cfs_log10_scaled_kappa),
    
    score_scaled = scale(score),
    score_scaled_ecdf = getECDF(score_scaled),
    
    score_scaled_kappa = standardize_data_kappa(score)
   # score_scaled_kappa_ecdf = getECDF(score_scaled_kappa)
  ) |> 
  ungroup()


d <- d |> 
  left_join(dG) |> 
  filter(
    !is.na(flow_cfs_log10)
  )

dWB0 <- d |> 
  filter(
    station_name %in% "West Brook 0_01171100"
  )
```

## Plot raw data  
 
```{r}
#| label: plotRealData
#| fig-height: 10

ggplot(d, aes(flow_cfs_log10, rank_pred)) +
  geom_point(
    #aes(color = data_group), 
    alpha = 0.025
  ) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  #geom_smooth(color = "darkgreen", se = FALSE) +
  labs(y = "Predicted relative flow percentile", x = "Observed flow (log10(cfs)") +
  theme_publication() +
  facet_wrap(~station_name, scales = "free")

```

### Plot absolute flow ECDF  
Fair amount of variation among stations
```{r}
#| label: plotECDFs

ggplot(d, aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +
  geom_line(aes(color = station_name)) +
  geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
  xlim(c(-3.5,3.5)) +
  theme_publication()

ggplot(d |> filter(!is.na(flow_cfs_log10_scaled)), aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +
  geom_line(aes(color = station_name)) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
  xlim(c(-3.5,3.5)) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  theme_publication() +
  facet_wrap(~station_name)


```

## Filter sites
Pick sites that seem to have enough data to get predictions.  
Logistic is blue line and gam is green line.
```{r}
#| label: filterSites

stationsToUse <- c(12, 29, 65, 80)

d2 <- d |> 
  filter(
    station_id %in% stationsToUse
  )

ggplot(d2, aes(flow_cfs_log10, rank_pred)) +
  geom_point(
    #aes(color = data_group), 
    alpha = 0.1
  ) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "green", se = FALSE) +
  labs(y = "Predicted relative flow percentile", x = "Observed flow (log10(cfs)") +
  theme_publication() +
  facet_wrap(~station_name, scales = "free")

ggplot(d2, aes(scale(flow_cfs_log10), scale(score))) +
  geom_point(
    #aes(color = data_group), 
    alpha = 0.1
  ) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(se = FALSE) +
  labs(y = "Score, scaled", x = "Observed flow (log10(cfs), scaled") +
  theme_publication() +
  facet_wrap(~station_name, scales = "free")

```

```{r}
#| label: output_d2

write.csv(d2, "./data/out/forObservable/d2.csv")

```


### Plot absolute flow ECDFs  
```{r}
#| label: plotECDFsd2

ggplot(d2, aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +
  geom_line(aes(color = station_name), size = 1.5) +
  geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black", size = 2) +
  xlim(c(-3.5,3.5)) +
  theme_publication()

```

## Site WB0
Explore variables for the WB0 site
```{r}
#| label: plotWB0

ggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Observed flow (log10(cfs))", y = "Score") +
  theme_publication()

ggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Observed flow (log10(cfs)), scaled", y = "Score, scaled") +
  theme_publication()

ggplot(dWB0, aes(rank_obs, rank_pred)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Ranked flow", y = "Ranked score") +
  theme_publication()

```

## Subsample flow data
Compare scaled flow and score data and explore how subsampled flow (different # of samples) approximates the scaled-score ECDC.  
'No anchors' uses just the subsampled flow points, 'with anchors' adds flow points at the 1 and 99th percentile of the flow distribution.  
The 'difference in area' value on the plots is the absolute difference between the subsampled flow and score cumulative distributions.

```{r}
#| label: compareECDCs

 ggplot(d2, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line(size = 2) +
    geom_line( aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "blue", size = 2) +
    labs(x = "Black = scaled observed score, Blue = scaled observed flow, Orange = subsampled flow", y = "Empirical cumulative dist") +
    facet_wrap(~station_name) +
    theme_publication() 
```


```{r}
#| label: subsampleFlow


getECDF_diff <- function(x, y){
  Fx <- ecdf(x)
  Fy <- ecdf(y)
  xy <- sort(unique(c(x,y)))
  heights <- abs(Fx(xy) - Fy(xy))[-length(xy)]
  widths <- xy[-1] - xy[-length(xy)]
  area <- as.numeric(heights %*% widths)

  return(area)
}


get_preds_gam <- function(dIn, num_pred_points = 100) {
  mod <- loess(flow_cfs_log10_scaled_ecdf ~ flow_cfs_log10_scaled, data = dIn)
  
  x <- seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)
  df <- data.frame(
    x = x,
    y = predict(mod, x)
  )
  return(df)
}

get_preds_interp <- function(dIn, num_pred_points = 100) {
  df <- data.frame(
    approx(
      dIn$flow_cfs_log10_scaled, 
      dIn$flow_cfs_log10_scaled_ecdf, 
      xout = seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)
    )
  )
  return(df)
}

get_observed_data_figs <- function(dIn, dInSample, base_size = 12) {
  
  fig_all <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line(size = 2) +
    geom_line( aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "blue", size = 2) +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    labs(x = "Black = scaled observed score, Blue = scaled observed flow, Orange = subsampled flow", y = "Empirical cumulative dist") +
    theme_publication(base_size = base_size) 
  
  return(
    list(
      fig_all=fig_all 
    )
  )
}

get_smoothed_data_figs <- function(dIn, dInSample, dInSample_interp, dInSample_gam, base_size_in = 12) {
   # make ggtitle smaller 
  fig_smooth_interpolate <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line() +
    geom_line(aes(x, y), color = "orange", size = 1.5, data = dInSample_interp) +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    geom_text(
      aes(x = -1.5, y = 0.9), 
      label = paste0(
        "Difference in area = ", 
        round(getECDF_diff(dIn$score_scaled_ecdf, dInSample_interp$y), 4)
      ), 
      size = 6, 
      color = "orange"
      ) +
    labs(x = "", y = "Emp cumul dist") +
    # smaller font size for ggtitle 
    ggtitle("Linear interpolation of subsampled flow") +
    theme_publication(base_size = base_size_in) +
    theme(plot.title = element_text(size = rel(0.8)))
    
  fig_smooth_gam <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line() +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    geom_line(aes(x, y), color = "orange", size = 1.5, data = dInSample_gam) +
    geom_text(
      aes(x = -1.5, y = 0.9), 
      label = paste0(
        "Difference in area = ", 
        round(getECDF_diff(dIn$score_scaled_ecdf, dInSample_gam$y), 4)
      ),
      size = 6, 
      color = "orange"
      ) +
    labs(x = "Black = scaled image score, Orange = subsampled flow", y = "Emp cumul dist") +
    ggtitle("GAM smooth of subsampled flow") +
    theme_publication(base_size = base_size_in) +
    theme(plot.title = element_text(size = rel(0.8)))
  
  return(
    list(
      fig_smooth_interpolate=fig_smooth_interpolate,
      fig_smooth_gam=fig_smooth_gam
    )
  )
}


plotSubSample <- function(dIn0, numSample, num_pred_points = 100, base_size_in = 12) {

   dIn <- dIn0 |> 
     dplyr::select(
      flow_cfs_log10_scaled, 
      flow_cfs_log10_scaled_ecdf,
      score_scaled, 
      score_scaled_ecdf
    )

  # subsample dIn  
  dInSample <- sample_n(dIn, numSample) 

  #############################################
  # without anchors  
  dInSample_no_anchors <- dInSample
  
  # Observed data - these data are the same with or without anchors
  get_observed_data_figs <- get_observed_data_figs(dIn, dInSample_no_anchors, base_size = base_size_in)
  figs_observed_data <- get_observed_data_figs$fig_all 

  # Interploated or smoothed data
  dInSample_interp_no_anchors <- get_preds_interp(dInSample_no_anchors, num_pred_points)
  dInSample_gam_no_anchors <- get_preds_gam(dInSample_no_anchors, num_pred_points)
                                                
  get_smoothed_data_figs_no_anchors <- get_smoothed_data_figs(dIn, dInSample, dInSample_interp_no_anchors, dInSample_gam_no_anchors, base_size = base_size_in)
  
  
  figs_smoothed_data_no_anchors <- ggarrange(
    get_smoothed_data_figs_no_anchors$fig_smooth_interpolate, 
    #get_smoothed_data_figs_no_anchors$fig_smooth_binomial, 
    get_smoothed_data_figs_no_anchors$fig_smooth_gam, 
    ncol = 1, nrow = 2
  )
  
  #############################################
  # with anchors  
  
  # add in min and max flow samples for anchors
  # 
  get_quantile_value <- function(d, quant) {
     q <- quantile(d, quant) 
     row_n <-  min(which(abs(d - q) == min(abs(d - q)))) # min to get 'unique' row number
     return(d[row_n])
  }

  dInSample_with_anchors <- rbind(
    dInSample, 
    dIn |> 
      filter(flow_cfs_log10_scaled == get_quantile_value(flow_cfs_log10_scaled, 0.01)) |> 
      filter(score_scaled == get_quantile_value(score_scaled, 0.01)),
    dIn |> 
      filter(flow_cfs_log10_scaled == get_quantile_value(flow_cfs_log10_scaled, 0.99)) |> 
      filter(score_scaled == get_quantile_value(score_scaled, 0.99))
  )
  
  # Observed data - these data are the same with or without anchors
  get_observed_data_figs_with_anchors <- get_observed_data_figs(dIn, dInSample_with_anchors, base_size = base_size_in)
  figs_observed_data_with_anchors <- get_observed_data_figs_with_anchors$fig_all 

  # Interpolated or smoothed data
  dInSample_interp_with_anchors <- get_preds_interp(dInSample_with_anchors, num_pred_points)
  dInSample_gam_with_anchors <- get_preds_gam(dInSample_with_anchors, num_pred_points)
                                                
  get_smoothed_data_figs_with_anchors <- get_smoothed_data_figs(dIn, dInSample_with_anchors, dInSample_interp_with_anchors, dInSample_gam_with_anchors, base_size = base_size_in)
  
  # 
  figs_smoothed_data_with_anchors <- ggarrange(
    get_smoothed_data_figs_with_anchors$fig_smooth_interpolate, 
    #get_smoothed_data_figs_with_anchors$fig_smooth_binomial, 
    get_smoothed_data_figs_with_anchors$fig_smooth_gam, 
    ncol = 1, nrow = 2
  )
  
  return(
    list(
      figs_observed_data=figs_observed_data, 
      figs_smoothed_data_no_anchors=figs_smoothed_data_no_anchors,
      figs_smoothed_data_with_anchors=figs_smoothed_data_with_anchors
    )
  )
  
}
```



::: panel-tabset
### West Brook0

#### 100 samples  
First set of graphs does not include min/max flow anchors, second set does.
```{r}
#| label: plotSubSample_100

dummy <- 2
plotSubSample(dWB0, 100)

```

#### 10 subsamples
```{r}
#| label: plotSubSample_10

dummy <- 2
plotSubSample(dWB0, 10)

```

#### 7 subsamples
```{r}
#| label: plotSubSample_7

dummy <- 2
plotSubSample(dWB0, 7)

```


#### 4 subsamples
```{r}
#| label: plotSubSample_4

dummy <- 2
plotSubSample(dWB0, 4)

```

#### 3 subsample
```{r}  
#| label: plotSubSample_3

dummy <- 2
plotSubSample(dWB0, 3)

```

### Avery Brook Bridge
```{r}
#| label: AB_data

dAB <- d |> filter(station_name == "Avery Brook_Bridge_01171000") 
```

#### 100 samples  
First set of graphs does not include min/max flow anchors, second set does.
```{r}
#| label: plotSubSample_100_dAB

dummy <- 2
plotSubSample(dAB, 100)

```

#### 10 subsamples
```{r}
#| label: plotSubSample_10_dAB

dummy <- 2
plotSubSample(dAB, 10)

```

#### 7 subsamples
```{r}
#| label: plotSubSample_7_dAB

dummy <- 2
plotSubSample(dAB, 7)

```


#### 4 subsamples
```{r}
#| label: plotSubSample_4_dAB

dummy <- 2
plotSubSample(dAB, 4)

```

#### 3 subsample
```{r}  
#| label: plotSubSample_3_dAB

dummy <- 2
plotSubSample(dAB, 3)

```


### Patroon Creek
```{r}
#| label: PC_data

dPC <- d |> filter(station_name == "01359135_Patroon Creek") 
```

#### 100 samples  
First set of graphs does not include min/max flow anchors, second set does.
```{r}
#| label: plotSubSample_100_dPC

dummy <- 2
plotSubSample(dPC, 100)

```

#### 10 subsamples
```{r}
#| label: plotSubSample_10_dPC

dummy <- 2
plotSubSample(dPC, 10)

```

#### 7 subsamples
```{r}
#| label: plotSubSample_7_dPC

dummy <- 2
plotSubSample(dPC, 7)

```


#### 4 subsamples
```{r}
#| label: plotSubSample_4_dPC

dummy <- 2
plotSubSample(dPC, 4)

```

#### 3 subsample
```{r}  
#| label: plotSubSample_3_dPC

dummy <- 2
plotSubSample(dPC, 3)

```



### Green River
```{r}
#| label: GR_data

dGR <- d |> filter(station_name == "Green River_01170100") 
```

#### 100 samples  
First set of graphs does not include min/max flow anchors, second set does.
```{r}
#| label: plotSubSample_100_dGR

dummy <- 2
plotSubSample(dGR, 100)

```

#### 10 subsamples
```{r}
#| label: plotSubSample_10_dGR

dummy <- 2
plotSubSample(dGR, 10)

```

#### 7 subsamples
```{r}
#| label: plotSubSample_7_dGR

dummy <- 2
plotSubSample(dGR, 7)

```


#### 4 subsamples
```{r}
#| label: plotSubSample_4_dGR

dummy <- 2
plotSubSample(dGR, 4)

```

#### 3 subsample
```{r}  
#| label: plotSubSample_3_dGR

dummy <- 2
plotSubSample(dGR, 3)

```



### Avery Brook side
```{r}
#| label: ABs_data

dABs <- d |> filter(station_name == "Avery Brook_Side_01171000") 
```

#### 100 samples  
First set of graphs does not include min/max flow anchors, second set does.
```{r}
#| label: plotSubSample_100_dABs

dummy <- 2
plotSubSample(dABs, 100)

```

#### 10 subsamples
```{r}
#| label: plotSubSample_10_dABs

dummy <- 2
plotSubSample(dABs, 10)

```

#### 7 subsamples
```{r}
#| label: plotSubSample_7_dABs

dummy <- 2
plotSubSample(dABs, 7)

```


#### 4 subsamples
```{r}
#| label: plotSubSample_4_dABs

dummy <- 2
plotSubSample(dABs, 4)

```

#### 3 subsample
```{r}  
#| label: plotSubSample_3_dABs

dummy <- 2
plotSubSample(dABs, 3)

```


:::


## Simulate area differences
```{r}
#| label: simDiffs

# repeating functions here for Quarto
 get_preds_gam_sim <- function(dIn, num_pred_points = 100) {
  mod <- loess(flow_cfs_log10_scaled_ecdf ~ flow_cfs_log10_scaled, data = dIn)
  
  x <- seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)
  df <- data.frame(
    x = x,
    y = predict(mod, x)
  )
  return(df)
}

get_preds_interp_sim <- function(dIn, num_pred_points = 100) {
  df <- data.frame(
    approx(
      dIn$flow_cfs_log10_scaled, 
      dIn$flow_cfs_log10_scaled_ecdf, 
      xout = seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)
    )
  )
  return(df)
}

get_quantile_value_sim <- function(d, quant) {
   q <- quantile(d, quant) 
   row_n <-  min(which(abs(d - q) == min(abs(d - q)))) # min to get 'unique' row number
   return(d[row_n])
}



n_rep <- 100
sim_diffs_out <- data.frame()


for(s in unique(d2$station_name)) {
  for(anchor_tf in c(TRUE, FALSE)) {
    for(n in c(100,50,10,8,6,4)) {
      for(rep in seq(1, n_rep)) {
       
        dIn <- d2 |> filter(station_name == s)
        dInSample0 <- sample_n(dIn, n) 
        
        if(anchor_tf) {
            dInSample <- rbind(
              dInSample0, 
              dIn |> 
                filter(flow_cfs_log10_scaled == get_quantile_value_sim(flow_cfs_log10_scaled, 0.01)) |> 
                filter(score_scaled == get_quantile_value_sim(score_scaled, 0.01)),
              dIn |> 
                filter(flow_cfs_log10_scaled == get_quantile_value_sim(flow_cfs_log10_scaled, 0.99)) |> 
                filter(score_scaled == get_quantile_value_sim(score_scaled, 0.99))
            )
        } 
        else {
          dInSample <- dInSample0
        }
        
        dInSample_interp <- get_preds_interp_sim(dInSample, n)
        area_diff_interp <- getECDF_diff(dIn$score_scaled_ecdf, dInSample_interp$y)
        
        dInSample_gam <- get_preds_gam_sim(dInSample, n)
        area_diff_gam <- getECDF_diff(dIn$score_scaled_ecdf, dInSample_gam$y)
        
        sim_diffs_out <- bind_rows(
          sim_diffs_out,
          data.frame(station_name=s, anchor_tf=anchor_tf, n = n, rep = rep, area_diff_interp = area_diff_interp, area_diff_gam = area_diff_gam)
        )
        
        #print(c(s,anchor_tf,n,rep))
      }
    }
  }
}


```

### Graph area differences
#### Linear interpolation between flow points
```{r}
#| label: graphAreaDiff_interp
dummy <- 1

ggplot(sim_diffs_out, aes(n, area_diff_interp, color = anchor_tf)) +
  geom_point() +
  #geom_line() +
  geom_smooth(method = "gam", 
              formula = y ~ s(x, bs = "cs", fx = TRUE, k = 3), se = FALSE) +
  facet_wrap(~station_name, scales = "free") +
  theme_publication()

```

#### GAM fit across flow points
```{r}
#| label: graphAreaDiff_gam
dummy <- 1

ggplot(sim_diffs_out, aes(n, area_diff_gam, color = anchor_tf)) +
  geom_point() +
  #geom_line() +
  geom_smooth(method = "gam", 
              formula = y ~ s(x, bs = "cs", fx = TRUE, k = 3), se = FALSE) +
  facet_wrap(~station_name, scales = "free") +
  theme_publication()

```


```{r}
hist(dWB0$flow_cfs_log10)
hist(dWB0$flow_cfs)


relFlow_WB0 <- data.frame(
  value = dWB0$rank_pred, 
  ecdf = getECDF(dWB0$rank_pred)
  ) |> 
  mutate(
    value0_100 = (value - min(value)) / (max(value) - min(value))
  )


ggplot(relFlow_WB0, aes(value0_100, ecdf)) +
  geom_point() +
  labs(x = "Relative flow from FPE scores") +
  theme_publication()

```


## Plot Scores/ranks
### West Brook 0
```{r}
#| label: plotECDFWB0

kappas <- estimate_kappa_params(dWB0$flow_cfs_log10)
# [1] -0.7751903  3.1289847  0.7443434  0.8989118
flow_kappa <- data.frame(
  flow = dWB0$flow_cfs_log10,
  x = pkappa4(
    dWB0$flow_cfs_log10,
    kappas[3],
    kappas[4],
    kappas[2],
    kappas[1]
  )
)


ggplot(flow_kappa, aes(flow)) +
  geom_histogram() + 
  geom_histogram(aes(x), color = "orange")

hist(dWB0$flow_cfs_log10)
#curve(dkappa4(dWB0$flow_cfs_log10, kappas[3], kappas[4],kappas[2],kappas[1]), add=TRUE, col='red4', lwd=2)




x<-rkappa4(1000,1,.2,12,10) 
hist(x,freq=FALSE,col='gray',border='white') 
curve(dkappa4(x,.1,.2,12,110),add=TRUE,col='red4',lwd=2)

#https://rdrr.io/cran/lmomco/man/parkap.html
lmr <- lmoms(dWB0$flow_cfs_log10)
parkap(lmr)



#ojs_define(dWB0_OJS = transpose(dWB0))

#  facet_wrap(~data_group)
```
