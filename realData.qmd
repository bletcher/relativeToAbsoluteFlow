
```{r}
#| label: libraries_real

library(FAdist)
library(fitdistrplus)
library(getPrepareWBData)
library(ggpubr)
library(moments)
library(lmomco)
library(MASS)
library(tidyverse)
```


# Real data 
## Functions
```{r}
#| label: functions


getECDF <- function(d) {
  fn <- ecdf(d)
  fn(d)
}

estimate_kappa_params <- function(data) {
  mu <- mean(data, na.rm = TRUE)
  sigma <- sd(data, na.rm = TRUE)
  skewness <- skewness(data, na.rm = TRUE)
  kurtosis <- kurtosis(data, na.rm = TRUE)
  
  kappa_params <- c(mu, sigma, skewness, kurtosis)
  #kappa_params <- c(skewness, kurtosis, sigma, mu)
  
  return(kappa_params)
}

# Function to standardize data using the 4-parameter kappa distribution without ECDF
standardize_data_kappa <- function(data) {
  kappa_params <- estimate_kappa_params(data)
  standardized_values <- pkappa4(data, kappa_params[1], kappa_params[2],
                                       kappa_params[3], kappa_params[4])
  
  return(standardized_values)
}




#fitdistr(dWB0$flow_cfs_log10, "kappa4")


pkappa4_ben <- function (q, shape1, shape2, scale = 1, location = 0, lower.tail = TRUE, log.p = FALSE) {
    Fx <- (1 - shape2 * (1 - shape1/scale * (q - location))^(1/shape1))^(1/shape2)
    if (!lower.tail) 
        Fx <- 1 - Fx
    if (log.p) 
        Fx <- log(Fx)
    return(Fx)
}




```


## Get data
```{r}
#| label: getRealData


d <- read.csv('./data/in/concatenated_predictions.csv') |> 
  mutate(flow_cfs_log10 = log10(flow_cfs))

#Get ECDF for each station
#
dG <- d |> 
  filter(!is.na(flow_cfs_log10)) |> 
  group_by(station_name) |> 
  mutate(
    flow_cfs_log10_ecdf = getECDF(flow_cfs_log10),
  
    flow_cfs_log10_scaled = scale(flow_cfs_log10), 
    flow_cfs_log10_scaled_ecdf = getECDF(flow_cfs_log10_scaled),
    
    #flow_cfs_log10_scaled_kappa = standardize_data_kappa(flow_cfs_log10), 
    #flow_cfs_log10_scaled_kappa_ecdf = getECDF(flow_cfs_log10_scaled_kappa),
    
    score_scaled = scale(score),
    score_scaled_ecdf = getECDF(score_scaled),
    
    score_scaled_kappa = standardize_data_kappa(score)
   # score_scaled_kappa_ecdf = getECDF(score_scaled_kappa)
  ) |> 
  ungroup()


# tmp=d |> 
#   filter(!is.na(flow_cfs_log10), station_name == "01359135_Patroon Creek") |> 
#   group_by(station_name) |> 
#   mutate(
#     flow_cfs_log10_ecdf = getECDF(flow_cfs_log10),
#   
#     flow_cfs_log10_scaled = scale(flow_cfs_log10), 
#     flow_cfs_log10_scaled_ecdf = getECDF(flow_cfs_log10_scaled),
#     
#     flow_cfs_log10_scaled_kappa = scale_kappa(flow_cfs_log10), 
#    # flow_cfs_log10_scaled_kappa_ecdf = getECDF(flow_cfs_log10_scaled_kappa),
#     
#     score_scaled = scale(score),
#     score_scaled_ecdf = getECDF(score_scaled),
#     
#     score_scaled_kappa = scale_kappa(score),
#     score_scaled_kappa_ecdf = getECDF(score_scaled_kappa)
#   ) |> 
#   ungroup()

  
d <- d |> 
  left_join(dG)

dWB0 <- d |> 
  filter(
    !is.na(flow_cfs_log10), 
    station_name %in% "West Brook 0_01171100"
  )
```

## Plot raw data  
Logistic is blue line and gam is green line. Regressions are across data_group. Grouped by site.  
```{r}
#| label: plotRealData
#| fig-height: 10

ggplot(d |> filter(!is.na(flow_cfs_log10)), aes(flow_cfs_log10, rank_pred)) +
  geom_point(aes(color = data_group), alpha = 0.025) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  #geom_smooth(color = "darkgreen", se = FALSE) +
  labs(y = "Predicted percentile", x = "Observed flow (log10(cfs)") +
  theme_publication() +
  facet_wrap(~station_name, scales = "free")

```

Pick sites that seem to have enough data to get predictions
```{r}
#| label: filterSites

stationsToUse <- c(12, 29, 65, 80)

d2 <- d |> 
  filter(
    !is.na(flow_cfs_log10), 
    station_id %in% stationsToUse
  )

ggplot(d2, aes(flow_cfs_log10, rank_pred)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(y = "Predicted percentile", x = "Observed flow (log10(cfs)") +
  theme_publication() +
  facet_wrap(~station_name, scales = "free")

ggplot(d2, aes(scale(flow_cfs_log10), scale(score))) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(y = "Score, scaled", x = "Observed flow (log10(cfs), scaled") +
  theme_publication() +
  facet_wrap(~station_name, scales = "free")

```

## Plot ECDF  
Fair amount of variation among stations
```{r}
#| label: plotECDFs

ggplot(d, aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +
  geom_line(aes(color = station_name)) +
  geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
  xlim(c(-3.5,3.5)) +
  theme_publication()

ggplot(d |> filter(!is.na(flow_cfs_log10_scaled)), aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +
  geom_line(aes(color = station_name)) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
  xlim(c(-3.5,3.5)) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  theme_publication() +
  facet_wrap(~station_name)


```

## Plot ECDF kappa 
Fair amount of variation among stations
```{r}
#| label: plotECDF_kappas
dummy=0
# ggplot(d, aes(flow_cfs_log10_scaled_kappa, flow_cfs_log10_scaled_kappa_ecdf)) +
#   geom_line(aes(color = station_name)) +
#   geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
#   xlim(c(-3.5,3.5)) +
#   theme_publication()
# 
# ggplot(d |> filter(!is.na(flow_cfs_log10_scaled_kappa)), aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_kappa_ecdf)) +
#   geom_line(aes(color = station_name)) +
#   #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
#   xlim(c(-3.5,3.5)) +
#   guides(color = guide_legend(override.aes = list(alpha = 1))) +
#   theme_publication() +
#   facet_wrap(~station_name)


```



## Plot Scores/ranks
### West Brook 0
```{r}
#| label: plotECDFWB0

kappas <- estimate_kappa_params(dWB0$flow_cfs_log10)
# [1] -0.7751903  3.1289847  0.7443434  0.8989118
flow_kappa <- data.frame(
  flow = dWB0$flow_cfs_log10,
  x = pkappa4(
    dWB0$flow_cfs_log10,
    kappas[3],
    kappas[4],
    kappas[2],
    kappas[1]
  )
)


ggplot(flow_kappa, aes(flow)) +
  geom_histogram() + 
  geom_histogram(aes(x), color = "orange")

hist(dWB0$flow_cfs_log10)
#curve(dkappa4(dWB0$flow_cfs_log10, kappas[3], kappas[4],kappas[2],kappas[1]), add=TRUE, col='red4', lwd=2)




x<-rkappa4(1000,1,.2,12,10) 
hist(x,freq=FALSE,col='gray',border='white') 
curve(dkappa4(x,.1,.2,12,110),add=TRUE,col='red4',lwd=2)

#https://rdrr.io/cran/lmomco/man/parkap.html
lmr <- lmoms(dWB0$flow_cfs_log10)
parkap(lmr)



#ojs_define(dWB0_OJS = transpose(dWB0))

ggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Observed flow (log10(cfs))", y = "Score") +
  theme_publication()

ggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Observed flow (log10(cfs)), scaled", y = "Score, scaled") +
  theme_publication()

ggplot(dWB0, aes(rank_obs, rank_pred)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Ranked flow", y = "Ranked score") +
  theme_publication()

ggplot(dWB0, aes(flow_cfs_log10, score)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
  #geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Observed flow (log10(cfs))", y = "score") +
  theme_publication() +
  facet_wrap(~data_group)


ggplot(dWB0, aes(rank_pred, score)) +
  geom_point(aes(color = data_group), alpha = 0.1) +
 # geom_point(aes(rank_obs,flow_cfs,color = data_group), alpha = 0.1) +
  
  guides(color = guide_legend(override.aes = list(alpha = 1))) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE) +
  geom_smooth(color = "darkgreen", se = FALSE) +
  labs(x = "Ranked score", y = "Score") +
  theme_publication() 
#  facet_wrap(~data_group)
```

## Plot ECDF

```{r}
#| label: scoreECDF


fn_ecdf_WB0 <- ecdf(dWB0$score)
plot(fn_ecdf_WB0)

ggplot(dWB0, aes(score)) + 
  stat_ecdf(geom = "step") +
  theme_publication()
  #stat_ecdf(aes(flow_cfs), color = "blue")

ggplot(dWB0, aes(score_scaled)) + 
  stat_ecdf(geom = "step") +
  stat_ecdf(aes(flow_cfs_log10_scaled), color = "blue") +
  theme_publication() 

```

## Plot ECDF reverse scales 

```{r}
#| label: plotECDFs_reverseScales

ggplot(d, aes(flow_cfs_log10_scaled_ecdf, flow_cfs_log10_scaled)) +
  geom_line(aes(color = station_name)) +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
  ylim(c(-3.5,3.5)) +
  theme_publication()

ggplot(dWB0, aes(flow_cfs_log10_scaled_ecdf, flow_cfs_log10_scaled)) +
  geom_line(color = "red") +
  geom_line(aes(score_scaled_ecdf, score_scaled), color = "blue") +
 # geom_smooth(method = "glm", method.args= list(family="binomial"), se = FALSE, color = "black") +
  ylim(c(-3.5,3.5)) +
  theme_publication()

```


### Subsample flow data

```{r}
#| label: subsampleFlow

get_observed_data_figs <- function(dIn, dInSampleApprox, dInSample) {
  fig_flow <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "blue", size = 2) +
    labs(x = "Scaled observed flow", y = "Emp cumul dist") +
    theme_publication() 
  
  fig_score <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line(size = 2) +
    labs(x = "Scaled image score", y = "Emp cumul dist") +
    theme_publication() 

  fig_subsample <- ggplot(dIn) + 
    geom_line(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "blue", size = 2) +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    labs(x = "Blue = observed scaled flow, Orange = subsampled flow", y = "Emp cumul dist") +
    theme_publication() 
  
 
  return(
    list(
      fig_flow=fig_flow, 
      fig_score=fig_score, 
      fig_subsample=fig_subsample
    )
  )
}

get_smoothed_data_figs <- function(dIn, dInSampleApprox, dInSample) {
 
  fig_smooth_binomial <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line() +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    geom_smooth(
      aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf),
      method = "glm", method.args= list(family="binomial"), se = FALSE, color = "orange",
      data = dInSample
      ) +
    labs(x = "Black = scaled image score, Orange = subsampled flow", y = "Emp cumul dist") +
    ggtitle("Binomial smooth of subsampled flow") +
    theme_publication() 
  
    
  fig_smooth_gam <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line() +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    geom_smooth(
      aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf),
      se = FALSE, color = "orange", linetype = "dashed",
      data = dInSample
      ) +
    labs(x = "Black = scaled image score, Orange = subsampled flow", y = "Emp cumul dist") +
    ggtitle("GAM smooth of subsampled flow") +
    theme_publication() 
  
    
  fig_smooth_interpolate <- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + 
    geom_line() +
    geom_line(aes(x, y), color = "orange", size = 2, data = dInSampleApprox) +
    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = "orange", size = 4, data = dInSample) +
    labs(x = "Black = scaled image score, Orange = subsampled flow", y = "Emp cumul dist") +
    ggtitle("Linear interpolation of subsampled flow") +
    theme_publication() 
  
  return(
    list(
      fig_smooth_binomial=fig_smooth_binomial, 
      fig_smooth_gam=fig_smooth_gam,
      fig_smooth_interpolate=fig_smooth_interpolate
    )
  )
}


plotSubSample <- function(dIn0, numSample){

   dIn <- dIn0 |> 
     dplyr::select(
      flow_cfs_log10_scaled, 
      flow_cfs_log10_scaled_ecdf,
      score_scaled, 
      score_scaled_ecdf
    )

  # subsample dIn  
  dInSample <- sample_n(dIn, numSample) 
  
 
  
  #############################################
  # without anchors  
  dInSample_no_anchors <- dInSample
  
  dInSampleApprox_no_anchors <- data.frame(
    approx(
      dInSample_no_anchors$flow_cfs_log10_scaled, 
      dInSample_no_anchors$flow_cfs_log10_scaled_ecdf, 
      dInSample_no_anchors$flow_cfs_log10_scaled
      )
    )
  
  # these data are the same with or without anchors
  get_observed_data_figs <- get_observed_data_figs(dIn, dInSampleApprox_no_anchors, dInSample_no_anchors)
  get_smoothed_data_figs_no_anchors <- get_smoothed_data_figs(dIn, dInSampleApprox_no_anchors, dInSample_no_anchors)
  
  figs_observed_data <- ggarrange(
    get_observed_data_figs$fig_flow, 
    get_observed_data_figs$fig_score, 
    get_observed_data_figs$fig_subsample, 
    ncol = 1, nrow = 3
  )
  
  figs_smoothed_data_no_anchors <- ggarrange(
    get_smoothed_data_figs_no_anchors$fig_smooth_interpolate, 
    get_smoothed_data_figs_no_anchors$fig_smooth_binomial, 
    get_smoothed_data_figs_no_anchors$fig_smooth_gam, 
    ncol = 1, nrow = 3
  )
  
  #############################################
  # with anchors  
  
  # add in min and max flow samples for anchors
  dInSample_with_anchors <- rbind(
    dInSample, 
    dIn |> filter(flow_cfs_log10_scaled == max(flow_cfs_log10_scaled)) |> filter(score_scaled == max(score_scaled)),
    dIn |> filter(flow_cfs_log10_scaled == min(flow_cfs_log10_scaled)) |> filter(score_scaled == min(score_scaled))
  )
  
  dInSampleApprox_with_anchors <- data.frame(
    approx(
      dInSample_with_anchors$flow_cfs_log10_scaled, 
      dInSample_with_anchors$flow_cfs_log10_scaled_ecdf, 
      dInSample_with_anchors$flow_cfs_log10_scaled
      )
    )
  
  #get_observed_data_figs_with_anchors <- get_observed_data_figs(dIn, dInSampleApprox_with_anchors, dInSample_with_anchors)
  get_smoothed_data_figs_with_anchors <- get_smoothed_data_figs(dIn, dInSampleApprox_with_anchors, dInSample_with_anchors)
  
  figs_smoothed_data_with_anchors <- ggarrange(
    get_smoothed_data_figs_with_anchors$fig_smooth_interpolate, 
    get_smoothed_data_figs_with_anchors$fig_smooth_binomial, 
    get_smoothed_data_figs_with_anchors$fig_smooth_gam, 
    ncol = 1, nrow = 3
  )
  
  
  
  return(
    list(
      figs_observed_data=figs_observed_data, 
      figs_smoothed_data_no_anchors=figs_smoothed_data_no_anchors,
      figs_smoothed_data_with_anchors=figs_smoothed_data_with_anchors
    )
  )
  
}
```

100 samples  
First set of graphs does not include min/max flow anchors, second set does.
```{r}
#| label: plotSubSample_100
#| 
plotSubSample(dWB0, 100)

```

10 subsamples
```{r}
#| label: plotSubSample_10
#| 
plotSubSample(dWB0, 10)

```

4 subsamples
```{r}
#| label: plotSubSample_4
#| 
plotSubSample(dWB0, 4)

```

1 subsample
```{r}  
#| label: plotSubSample_1
#| 
plotSubSample(dWB0, 2)

```

```{r}
hist(dWB0$flow_cfs_log10)
hist(dWB0$flow_cfs)


relFlow_WB0 <- data.frame(
  value = dWB0$rank_pred, 
  ecdf = fn_ecdf_WB0(dWB0$rank_pred)
  ) |> 
  mutate(
    value0_100 = (value - min(value)) / (max(value) - min(value))
  )


ggplot(relFlow_WB0, aes(value0_100, ecdf)) +
  geom_point() +
  labs(x = "Relative flow from FPE scores") +
  theme_publication()

```
