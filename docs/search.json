[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Relative to absolute flow",
    "section": "",
    "text": "1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "realData.html",
    "href": "realData.html",
    "title": "2  Real data",
    "section": "",
    "text": "2.1 Functions\nCode\ngetECDF &lt;- function(d) {\n  fn &lt;- ecdf(d)\n  fn(d)\n}\n\nestimate_kappa_params &lt;- function(data) {\n  mu &lt;- mean(data, na.rm = TRUE)\n  sigma &lt;- sd(data, na.rm = TRUE)\n  skewness &lt;- skewness(data, na.rm = TRUE)\n  kurtosis &lt;- kurtosis(data, na.rm = TRUE)\n  \n  kappa_params &lt;- c(mu, sigma, skewness, kurtosis)\n  #kappa_params &lt;- c(skewness, kurtosis, sigma, mu)\n  \n  return(kappa_params)\n}\n\n# Function to standardize data using the 4-parameter kappa distribution without ECDF\nstandardize_data_kappa &lt;- function(data) {\n  kappa_params &lt;- estimate_kappa_params(data)\n  standardized_values &lt;- pkappa4(data, kappa_params[1], kappa_params[2],\n                                       kappa_params[3], kappa_params[4])\n  \n  return(standardized_values)\n}\n\n\n\n\n#fitdistr(dWB0$flow_cfs_log10, \"kappa4\")\n\n\npkappa4_ben &lt;- function (q, shape1, shape2, scale = 1, location = 0, lower.tail = TRUE, log.p = FALSE) {\n    Fx &lt;- (1 - shape2 * (1 - shape1/scale * (q - location))^(1/shape1))^(1/shape2)\n    if (!lower.tail) \n        Fx &lt;- 1 - Fx\n    if (log.p) \n        Fx &lt;- log(Fx)\n    return(Fx)\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#get-data",
    "href": "realData.html#get-data",
    "title": "2  Real data",
    "section": "2.2 Get data",
    "text": "2.2 Get data\n\n\nCode\nd &lt;- read.csv('./data/in/concatenated_predictions.csv') |&gt; \n  mutate(flow_cfs_log10 = log10(flow_cfs))\n\n#Get ECDF for each station\n#\ndG &lt;- d |&gt; \n  filter(!is.na(flow_cfs_log10)) |&gt; \n  group_by(station_name) |&gt; \n  mutate(\n    flow_cfs_log10_ecdf = getECDF(flow_cfs_log10),\n  \n    flow_cfs_log10_scaled = scale(flow_cfs_log10), \n    flow_cfs_log10_scaled_ecdf = getECDF(flow_cfs_log10_scaled),\n    \n    #flow_cfs_log10_scaled_kappa = standardize_data_kappa(flow_cfs_log10), \n    #flow_cfs_log10_scaled_kappa_ecdf = getECDF(flow_cfs_log10_scaled_kappa),\n    \n    score_scaled = scale(score),\n    score_scaled_ecdf = getECDF(score_scaled),\n    \n    score_scaled_kappa = standardize_data_kappa(score)\n   # score_scaled_kappa_ecdf = getECDF(score_scaled_kappa)\n  ) |&gt; \n  ungroup()\n\n\n# tmp=d |&gt; \n#   filter(!is.na(flow_cfs_log10), station_name == \"01359135_Patroon Creek\") |&gt; \n#   group_by(station_name) |&gt; \n#   mutate(\n#     flow_cfs_log10_ecdf = getECDF(flow_cfs_log10),\n#   \n#     flow_cfs_log10_scaled = scale(flow_cfs_log10), \n#     flow_cfs_log10_scaled_ecdf = getECDF(flow_cfs_log10_scaled),\n#     \n#     flow_cfs_log10_scaled_kappa = scale_kappa(flow_cfs_log10), \n#    # flow_cfs_log10_scaled_kappa_ecdf = getECDF(flow_cfs_log10_scaled_kappa),\n#     \n#     score_scaled = scale(score),\n#     score_scaled_ecdf = getECDF(score_scaled),\n#     \n#     score_scaled_kappa = scale_kappa(score),\n#     score_scaled_kappa_ecdf = getECDF(score_scaled_kappa)\n#   ) |&gt; \n#   ungroup()\n\n  \nd &lt;- d |&gt; \n  left_join(dG) |&gt; \n  filter(\n    !is.na(flow_cfs_log10)\n  )\n\ndWB0 &lt;- d |&gt; \n  filter(\n    station_name %in% \"West Brook 0_01171100\"\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-raw-data",
    "href": "realData.html#plot-raw-data",
    "title": "2  Real data",
    "section": "2.3 Plot raw data",
    "text": "2.3 Plot raw data\nLogistic is blue line and gam is green line. Regressions are across data_group. Grouped by site.\n\n\nCode\nggplot(d |&gt; filter(!is.na(flow_cfs_log10)), aes(flow_cfs_log10, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.025) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  #geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Predicted percentile\", x = \"Observed flow (log10(cfs)\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n\n\n\nPick sites that seem to have enough data to get predictions\n\n\nCode\nstationsToUse &lt;- c(12, 29, 65, 80)\n\nd2 &lt;- d |&gt; \n  filter(\n    !is.na(flow_cfs_log10), \n    station_id %in% stationsToUse\n  )\n\nggplot(d2, aes(flow_cfs_log10, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Predicted percentile\", x = \"Observed flow (log10(cfs)\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(d2, aes(scale(flow_cfs_log10), scale(score))) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Score, scaled\", x = \"Observed flow (log10(cfs), scaled\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nwrite.csv(d2, \"./data/out/forObservable/d2.csv\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-ecdf",
    "href": "realData.html#plot-ecdf",
    "title": "2  Real data",
    "section": "2.4 Plot ECDF",
    "text": "2.4 Plot ECDF\nFair amount of variation among stations\n\n\nCode\nggplot(d, aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +\n  geom_line(aes(color = station_name)) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n  xlim(c(-3.5,3.5)) +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(d |&gt; filter(!is.na(flow_cfs_log10_scaled)), aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +\n  geom_line(aes(color = station_name)) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n  xlim(c(-3.5,3.5)) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  theme_publication() +\n  facet_wrap(~station_name)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-ecdf-kappa",
    "href": "realData.html#plot-ecdf-kappa",
    "title": "2  Real data",
    "section": "2.5 Plot ECDF kappa",
    "text": "2.5 Plot ECDF kappa\nFair amount of variation among stations\n\n\nCode\ndummy=0\n# ggplot(d, aes(flow_cfs_log10_scaled_kappa, flow_cfs_log10_scaled_kappa_ecdf)) +\n#   geom_line(aes(color = station_name)) +\n#   geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n#   xlim(c(-3.5,3.5)) +\n#   theme_publication()\n# \n# ggplot(d |&gt; filter(!is.na(flow_cfs_log10_scaled_kappa)), aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_kappa_ecdf)) +\n#   geom_line(aes(color = station_name)) +\n#   #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n#   xlim(c(-3.5,3.5)) +\n#   guides(color = guide_legend(override.aes = list(alpha = 1))) +\n#   theme_publication() +\n#   facet_wrap(~station_name)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-scoresranks",
    "href": "realData.html#plot-scoresranks",
    "title": "2  Real data",
    "section": "2.6 Plot Scores/ranks",
    "text": "2.6 Plot Scores/ranks\n\n2.6.1 West Brook 0\n\n\nCode\nkappas &lt;- estimate_kappa_params(dWB0$flow_cfs_log10)\n# [1] -0.7751903  3.1289847  0.7443434  0.8989118\nflow_kappa &lt;- data.frame(\n  flow = dWB0$flow_cfs_log10,\n  x = pkappa4(\n    dWB0$flow_cfs_log10,\n    kappas[3],\n    kappas[4],\n    kappas[2],\n    kappas[1]\n  )\n)\n\n\nggplot(flow_kappa, aes(flow)) +\n  geom_histogram() + \n  geom_histogram(aes(x), color = \"orange\")\n\n\n\n\n\n\n\n\n\nCode\nhist(dWB0$flow_cfs_log10)\n\n\n\n\n\n\n\n\n\nCode\n#curve(dkappa4(dWB0$flow_cfs_log10, kappas[3], kappas[4],kappas[2],kappas[1]), add=TRUE, col='red4', lwd=2)\n\n\n\n\nx&lt;-rkappa4(1000,1,.2,12,10) \nhist(x,freq=FALSE,col='gray',border='white') \ncurve(dkappa4(x,.1,.2,12,110),add=TRUE,col='red4',lwd=2)\n\n\n\n\n\n\n\n\n\nCode\n#https://rdrr.io/cran/lmomco/man/parkap.html\nlmr &lt;- lmoms(dWB0$flow_cfs_log10)\nparkap(lmr)\n\n\n$type\n[1] \"kap\"\n\n$para\n         xi       alpha       kappa           h \n 0.81233110  0.73677738  0.58117525 -0.09269592 \n\n$source\n[1] \"parkap\"\n\n$support\n   lower    upper \n    -Inf 2.080068 \n\n$message\n[1] \"\"\n\n$ifail\n[1] 0\n\n$ifailtext\n[1] \"Successful parameter estimation.\"\n\n\nCode\n#ojs_define(dWB0_OJS = transpose(dWB0))\n\nggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs))\", y = \"Score\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs)), scaled\", y = \"Score, scaled\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(rank_obs, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Ranked flow\", y = \"Ranked score\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10, score)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs))\", y = \"score\") +\n  theme_publication() +\n  facet_wrap(~data_group)\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(rank_pred, score)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n # geom_point(aes(rank_obs,flow_cfs,color = data_group), alpha = 0.1) +\n  \n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Ranked score\", y = \"Score\") +\n  theme_publication() \n\n\n\n\n\n\n\n\n\nCode\n#  facet_wrap(~data_group)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-ecdf-1",
    "href": "realData.html#plot-ecdf-1",
    "title": "2  Real data",
    "section": "2.7 Plot ECDF",
    "text": "2.7 Plot ECDF\n\n\nCode\nfn_ecdf_WB0 &lt;- ecdf(dWB0$score)\nplot(fn_ecdf_WB0)\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(score)) + \n  stat_ecdf(geom = \"step\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\n  #stat_ecdf(aes(flow_cfs), color = \"blue\")\n\nggplot(dWB0, aes(score_scaled)) + \n  stat_ecdf(geom = \"step\") +\n  stat_ecdf(aes(flow_cfs_log10_scaled), color = \"blue\") +\n  theme_publication()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-ecdf-reverse-scales",
    "href": "realData.html#plot-ecdf-reverse-scales",
    "title": "2  Real data",
    "section": "2.8 Plot ECDF reverse scales",
    "text": "2.8 Plot ECDF reverse scales\n\n\nCode\nggplot(d, aes(flow_cfs_log10_scaled_ecdf, flow_cfs_log10_scaled)) +\n  geom_line(aes(color = station_name)) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n  ylim(c(-3.5,3.5)) +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10_scaled_ecdf, flow_cfs_log10_scaled)) +\n  geom_line(color = \"red\") +\n  geom_line(aes(score_scaled_ecdf, score_scaled), color = \"blue\") +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n  ylim(c(-3.5,3.5)) +\n  theme_publication()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#subsample-flow-data",
    "href": "realData.html#subsample-flow-data",
    "title": "2  Real data",
    "section": "2.9 Subsample flow data",
    "text": "2.9 Subsample flow data\n\n\nCode\ngetECDF_diff &lt;- function(x, y){\n  Fx &lt;- ecdf(x)\n  Fy &lt;- ecdf(y)\n  xy &lt;- sort(unique(c(x,y)))\n  heights &lt;- abs(Fx(xy) - Fy(xy))[-length(xy)]\n  widths &lt;- xy[-1] - xy[-length(xy)]\n  area &lt;- as.numeric(heights %*% widths)\n\n  return(area)\n}\n\n\nget_preds_gam &lt;- function(dIn, num_pred_points = 100) {\n  mod &lt;- loess(flow_cfs_log10_scaled_ecdf ~ flow_cfs_log10_scaled, data = dIn)\n  \n  x &lt;- seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)\n  df &lt;- data.frame(\n    x = x,\n    y = predict(mod, x)\n  )\n  return(df)\n}\n\nget_preds_interp &lt;- function(dIn, num_pred_points = 100) {\n  df &lt;- data.frame(\n    approx(\n      dIn$flow_cfs_log10_scaled, \n      dIn$flow_cfs_log10_scaled_ecdf, \n      xout = seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)\n    )\n  )\n  return(df)\n}\n\nget_observed_data_figs &lt;- function(dIn, dInSample, base_size = 12) {\n  \n  fig_all &lt;- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line(size = 2) +\n    geom_line( aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"blue\", size = 2) +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    labs(x = \"Black = scaled observed score, Blue = scaled observed flow, Orange = subsampled flow\", y = \"Empirical cumulative dist\") +\n    theme_publication(base_size = base_size) \n  \n  return(\n    list(\n      fig_all=fig_all \n    )\n  )\n}\n\nget_smoothed_data_figs &lt;- function(dIn, dInSample, dInSample_interp, dInSample_gam, base_size_in = 12) {\n   # make ggtitle smaller \n  fig_smooth_interpolate &lt;- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line() +\n    geom_line(aes(x, y), color = \"orange\", size = 1.5, data = dInSample_interp) +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    geom_text(\n      aes(x = -1.5, y = 0.9), \n      label = paste0(\n        \"Difference in area = \", \n        round(getECDF_diff(dIn$score_scaled_ecdf, dInSample_interp$y), 5)\n      ), \n      size = 6, \n      color = \"orange\"\n      ) +\n    labs(x = \"\", y = \"Emp cumul dist\") +\n    # smaller font size for ggtitle \n    ggtitle(\"Linear interpolation of subsampled flow\") +\n    theme_publication(base_size = base_size_in) +\n    theme(plot.title = element_text(size = rel(0.8)))\n    \n  fig_smooth_gam &lt;- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line() +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    geom_line(aes(x, y), color = \"orange\", size = 1.5, data = dInSample_gam) +\n    geom_text(\n      aes(x = -1.5, y = 0.9), \n      label = paste0(\n        \"Difference in area = \", \n        round(getECDF_diff(dIn$score_scaled_ecdf, dInSample_gam$y), 5)\n      ),\n      size = 6, \n      color = \"orange\"\n      ) +\n    labs(x = \"Black = scaled image score, Orange = subsampled flow\", y = \"Emp cumul dist\") +\n    ggtitle(\"GAM smooth of subsampled flow\") +\n    theme_publication(base_size = base_size_in) +\n    theme(plot.title = element_text(size = rel(0.8)))\n  \n  return(\n    list(\n      fig_smooth_interpolate=fig_smooth_interpolate,\n      fig_smooth_gam=fig_smooth_gam\n    )\n  )\n}\n\n\nplotSubSample &lt;- function(dIn0, numSample, num_pred_points = 100, base_size_in = 12) {\n\n   dIn &lt;- dIn0 |&gt; \n     dplyr::select(\n      flow_cfs_log10_scaled, \n      flow_cfs_log10_scaled_ecdf,\n      score_scaled, \n      score_scaled_ecdf\n    )\n\n  # subsample dIn  \n  dInSample &lt;- sample_n(dIn, numSample) \n\n  #############################################\n  # without anchors  \n  dInSample_no_anchors &lt;- dInSample\n  \n  # Observed data - these data are the same with or without anchors\n  get_observed_data_figs &lt;- get_observed_data_figs(dIn, dInSample_no_anchors, base_size = base_size_in)\n  figs_observed_data &lt;- get_observed_data_figs$fig_all \n\n  # Interploated or smoothed data\n  dInSample_interp_no_anchors &lt;- get_preds_interp(dInSample_no_anchors, num_pred_points)\n  dInSample_gam_no_anchors &lt;- get_preds_gam(dInSample_no_anchors, num_pred_points)\n                                                \n  get_smoothed_data_figs_no_anchors &lt;- get_smoothed_data_figs(dIn, dInSample, dInSample_interp_no_anchors, dInSample_gam_no_anchors, base_size = base_size_in)\n  \n  \n  figs_smoothed_data_no_anchors &lt;- ggarrange(\n    get_smoothed_data_figs_no_anchors$fig_smooth_interpolate, \n    #get_smoothed_data_figs_no_anchors$fig_smooth_binomial, \n    get_smoothed_data_figs_no_anchors$fig_smooth_gam, \n    ncol = 1, nrow = 2\n  )\n  \n  #############################################\n  # with anchors  \n  \n  # add in min and max flow samples for anchors\n  # \n  get_quantile_value &lt;- function(d, quant) {\n     q &lt;- quantile(d, quant) \n     row_n &lt;-  min(which(abs(d - q) == min(abs(d - q)))) # min to get 'unique' row number\n     return(d[row_n])\n  }\n\n  dInSample_with_anchors &lt;- rbind(\n    dInSample, \n    dIn |&gt; \n      filter(flow_cfs_log10_scaled == get_quantile_value(flow_cfs_log10_scaled, 0.01)) |&gt; \n      filter(score_scaled == get_quantile_value(score_scaled, 0.01)),\n    dIn |&gt; \n      filter(flow_cfs_log10_scaled == get_quantile_value(flow_cfs_log10_scaled, 0.99)) |&gt; \n      filter(score_scaled == get_quantile_value(score_scaled, 0.99))\n  )\n  \n  # Observed data - these data are the same with or without anchors\n  get_observed_data_figs_with_anchors &lt;- get_observed_data_figs(dIn, dInSample_with_anchors, base_size = base_size_in)\n  figs_observed_data_with_anchors &lt;- get_observed_data_figs_with_anchors$fig_all \n\n  # Interpolated or smoothed data\n  dInSample_interp_with_anchors &lt;- get_preds_interp(dInSample_with_anchors, num_pred_points)\n  dInSample_gam_with_anchors &lt;- get_preds_gam(dInSample_with_anchors, num_pred_points)\n                                                \n  get_smoothed_data_figs_with_anchors &lt;- get_smoothed_data_figs(dIn, dInSample_with_anchors, dInSample_interp_with_anchors, dInSample_gam_with_anchors, base_size = base_size_in)\n  \n  # \n  figs_smoothed_data_with_anchors &lt;- ggarrange(\n    get_smoothed_data_figs_with_anchors$fig_smooth_interpolate, \n    #get_smoothed_data_figs_with_anchors$fig_smooth_binomial, \n    get_smoothed_data_figs_with_anchors$fig_smooth_gam, \n    ncol = 1, nrow = 2\n  )\n  \n  return(\n    list(\n      figs_observed_data=figs_observed_data, \n      figs_smoothed_data_no_anchors=figs_smoothed_data_no_anchors,\n      figs_smoothed_data_with_anchors=figs_smoothed_data_with_anchors\n    )\n  )\n  \n}\n\n\n\nWest Brook0Avery Brook BridgePatroon CreekGreen River\n\n\n\n2.9.0.1 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.2 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.3 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.4 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.5 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndAB &lt;- d |&gt; filter(station_name == \"Avery Brook_Bridge_01171000\") \n\n\n\n2.9.0.6 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.7 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.8 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.9 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.10 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndPC &lt;- d |&gt; filter(station_name == \"01359135_Patroon Creek\") \n\n\n\n2.9.0.11 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.12 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.13 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.14 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.15 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndGR &lt;- d |&gt; filter(station_name == \"Green River_01170100\") \n\n\n\n2.9.0.16 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.17 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.18 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.19 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.9.0.20 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nhist(dWB0$flow_cfs_log10)\n\n\n\n\n\n\n\n\n\nCode\nhist(dWB0$flow_cfs)\n\n\n\n\n\n\n\n\n\nCode\nrelFlow_WB0 &lt;- data.frame(\n  value = dWB0$rank_pred, \n  ecdf = fn_ecdf_WB0(dWB0$rank_pred)\n  ) |&gt; \n  mutate(\n    value0_100 = (value - min(value)) / (max(value) - min(value))\n  )\n\n\nggplot(relFlow_WB0, aes(value0_100, ecdf)) +\n  geom_point() +\n  labs(x = \"Relative flow from FPE scores\") +\n  theme_publication()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  }
]