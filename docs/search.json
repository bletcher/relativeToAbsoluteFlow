[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Relative to absolute flow",
    "section": "",
    "text": "1 Introduction\nFlow in headwater (wadeable) streams is not well understood because most USGS gages target larger streams and rivers, because there are so many smaller streams and because it is expensive to collect flow data using traditional methods. With the explosion of AI/ML approaches in science, we now have the opportunity to use imagery to estimate flow in streams - see the Flow Photos Explorer. FPE is a combined database and modeling system which uses machine learning to estimate the distribution of relative flows among all the images for a site. The cumulative distribution of relative flows provides a ranking of all the images and also gives the shape of the relative flow duration curve. This can be valuable information by itself, but often practitioners will need estimates of absolute flow (e.g. m3s-1).\nHere, we explore the empirical cumulative distribution curves (ECDC) of relative flow for several sites from FPE and, for sites with known flows estimated using the traditional approach, we compare the image-based ECDC to absolute flow ECDC and evaluate how well some small number of absolute flow estimates can approximate the entire ECDC and whether we can use these estimates to convert the image-based ECDC to an absolute flow ECDC.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "realData.html",
    "href": "realData.html",
    "title": "2  Real data",
    "section": "",
    "text": "2.0.0.1 Functions\nCode\ngetECDF &lt;- function(d) {\n  fn &lt;- ecdf(d)\n  fn(d)\n}\n\nestimate_kappa_params &lt;- function(data) {\n  mu &lt;- mean(data, na.rm = TRUE)\n  sigma &lt;- sd(data, na.rm = TRUE)\n  skewness &lt;- skewness(data, na.rm = TRUE)\n  kurtosis &lt;- kurtosis(data, na.rm = TRUE)\n  \n  kappa_params &lt;- c(mu, sigma, skewness, kurtosis)\n  #kappa_params &lt;- c(skewness, kurtosis, sigma, mu)\n  \n  return(kappa_params)\n}\n\n# Function to standardize data using the 4-parameter kappa distribution without ECDF# doesn't work\nstandardize_data_kappa &lt;- function(data) {\n  kappa_params &lt;- estimate_kappa_params(data)\n  standardized_values &lt;- pkappa4(data, kappa_params[1], kappa_params[2],\n                                       kappa_params[3], kappa_params[4])\n  \n  return(standardized_values)\n}\n\npkappa4_ben &lt;- function (q, shape1, shape2, scale = 1, location = 0, lower.tail = TRUE, log.p = FALSE) {\n    Fx &lt;- (1 - shape2 * (1 - shape1/scale * (q - location))^(1/shape1))^(1/shape2)\n    if (!lower.tail) \n        Fx &lt;- 1 - Fx\n    if (log.p) \n        Fx &lt;- log(Fx)\n    return(Fx)\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#get-data",
    "href": "realData.html#get-data",
    "title": "2  Real data",
    "section": "2.1 Get data",
    "text": "2.1 Get data\nImport and manipulate data from FPE.\nManipulation includes scaling (z-score) the absolute flow (flow_cfs) and the image-based score from the ML model in FPE, and developing empirical distribution curves for both the raw and the scaled values.\n\n\nCode\nd &lt;- read.csv('./data/in/concatenated_predictions.csv') |&gt; \n  mutate(flow_cfs_log10 = log10(flow_cfs))\n\n#Get ECDF for each station\n#\ndG &lt;- d |&gt; \n  filter(!is.na(flow_cfs_log10)) |&gt; \n  group_by(station_name) |&gt; \n  mutate(\n    flow_cfs_log10_ecdf = getECDF(flow_cfs_log10),\n  \n    flow_cfs_log10_scaled = scale(flow_cfs_log10), \n    flow_cfs_log10_scaled_ecdf = getECDF(flow_cfs_log10_scaled),\n    \n    #flow_cfs_log10_scaled_kappa = standardize_data_kappa(flow_cfs_log10), \n    #flow_cfs_log10_scaled_kappa_ecdf = getECDF(flow_cfs_log10_scaled_kappa),\n    \n    score_scaled = scale(score),\n    score_scaled_ecdf = getECDF(score_scaled),\n    \n    score_scaled_kappa = standardize_data_kappa(score)\n   # score_scaled_kappa_ecdf = getECDF(score_scaled_kappa)\n  ) |&gt; \n  ungroup()\n\n\nd &lt;- d |&gt; \n  left_join(dG) |&gt; \n  filter(\n    !is.na(flow_cfs_log10)\n  )\n\ndWB0 &lt;- d |&gt; \n  filter(\n    station_name %in% \"West Brook 0_01171100\"\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-raw-data",
    "href": "realData.html#plot-raw-data",
    "title": "2  Real data",
    "section": "2.2 Plot raw data",
    "text": "2.2 Plot raw data\n\n\nCode\nggplot(d, aes(flow_cfs_log10, rank_pred)) +\n  geom_point(\n    #aes(color = data_group), \n    alpha = 0.025\n  ) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  #geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Predicted relative flow percentile\", x = \"Observed flow (log10(cfs)\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n\n\n\n\n2.2.1 Plot absolute flow ECDF\nFair amount of variation among stations\n\n\nCode\nggplot(d, aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +\n  geom_line(aes(color = station_name)) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n  xlim(c(-3.5,3.5)) +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(d |&gt; filter(!is.na(flow_cfs_log10_scaled)), aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +\n  geom_line(aes(color = station_name)) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\") +\n  xlim(c(-3.5,3.5)) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  theme_publication() +\n  facet_wrap(~station_name)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#filter-sites",
    "href": "realData.html#filter-sites",
    "title": "2  Real data",
    "section": "2.3 Filter sites",
    "text": "2.3 Filter sites\nPick sites that seem to have enough data to get predictions.\nLogistic is blue line and gam is green line.\n\n\nCode\nstationsToUse &lt;- c(12, 29, 65, 80)\n\nd2 &lt;- d |&gt; \n  filter(\n    station_id %in% stationsToUse\n  )\n\nggplot(d2, aes(flow_cfs_log10, rank_pred)) +\n  geom_point(\n    #aes(color = data_group), \n    alpha = 0.1\n  ) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"green\", se = FALSE) +\n  labs(y = \"Predicted relative flow percentile\", x = \"Observed flow (log10(cfs)\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n\n\n\nCode\nggplot(d2, aes(scale(flow_cfs_log10), scale(score))) +\n  geom_point(\n    #aes(color = data_group), \n    alpha = 0.1\n  ) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(se = FALSE) +\n  labs(y = \"Score, scaled\", x = \"Observed flow (log10(cfs), scaled\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n\n\n\n\n\nCode\nwrite.csv(d2, \"./data/out/forObservable/d2.csv\")\n\n\n\n2.3.1 Plot absolute flow ECDFs\n\n\nCode\nggplot(d2, aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf)) +\n  geom_line(aes(color = station_name), size = 1.5) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE, color = \"black\", size = 2) +\n  xlim(c(-3.5,3.5)) +\n  theme_publication()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#site-wb0",
    "href": "realData.html#site-wb0",
    "title": "2  Real data",
    "section": "2.4 Site WB0",
    "text": "2.4 Site WB0\nExplore variables for the WB0 site\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs))\", y = \"Score\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs)), scaled\", y = \"Score, scaled\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\nCode\nggplot(dWB0, aes(rank_obs, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Ranked flow\", y = \"Ranked score\") +\n  theme_publication()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#subsample-flow-data",
    "href": "realData.html#subsample-flow-data",
    "title": "2  Real data",
    "section": "2.5 Subsample flow data",
    "text": "2.5 Subsample flow data\nCompare scaled flow and score data and explore how subsampled flow (different # of samples) approximates the scaled-score ECDC.\n‘No anchors’ uses just the subsampled flow points, ‘with anchors’ adds flow points at the 1 and 99th percentile of the flow distribution.\nThe ‘difference in area’ value on the plots is the absolute difference between the subsampled flow and score cumulative distributions.\n\n\nCode\n ggplot(d2, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line(size = 2) +\n    geom_line( aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"blue\", size = 2) +\n    labs(x = \"Black = scaled observed score, Blue = scaled observed flow, Orange = subsampled flow\", y = \"Empirical cumulative dist\") +\n    facet_wrap(~station_name) +\n    theme_publication() \n\n\n\n\n\n\n\n\n\n\n\nCode\ngetECDF_diff &lt;- function(x, y){\n  Fx &lt;- ecdf(x)\n  Fy &lt;- ecdf(y)\n  xy &lt;- sort(unique(c(x,y)))\n  heights &lt;- abs(Fx(xy) - Fy(xy))[-length(xy)]\n  widths &lt;- xy[-1] - xy[-length(xy)]\n  area &lt;- as.numeric(heights %*% widths)\n\n  return(area)\n}\n\n\nget_preds_gam &lt;- function(dIn, num_pred_points = 100) {\n  mod &lt;- loess(flow_cfs_log10_scaled_ecdf ~ flow_cfs_log10_scaled, data = dIn)\n  \n  x &lt;- seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)\n  df &lt;- data.frame(\n    x = x,\n    y = predict(mod, x)\n  )\n  return(df)\n}\n\nget_preds_interp &lt;- function(dIn, num_pred_points = 100) {\n  df &lt;- data.frame(\n    approx(\n      dIn$flow_cfs_log10_scaled, \n      dIn$flow_cfs_log10_scaled_ecdf, \n      xout = seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)\n    )\n  )\n  return(df)\n}\n\nget_observed_data_figs &lt;- function(dIn, dInSample, base_size = 12) {\n  \n  fig_all &lt;- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line(size = 2) +\n    geom_line( aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"blue\", size = 2) +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    labs(x = \"Black = scaled observed score, Blue = scaled observed flow, Orange = subsampled flow\", y = \"Empirical cumulative dist\") +\n    theme_publication(base_size = base_size) \n  \n  return(\n    list(\n      fig_all=fig_all \n    )\n  )\n}\n\nget_smoothed_data_figs &lt;- function(dIn, dInSample, dInSample_interp, dInSample_gam, base_size_in = 12) {\n   # make ggtitle smaller \n  fig_smooth_interpolate &lt;- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line() +\n    geom_line(aes(x, y), color = \"orange\", size = 1.5, data = dInSample_interp) +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    geom_text(\n      aes(x = -1.5, y = 0.9), \n      label = paste0(\n        \"Difference in area = \", \n        round(getECDF_diff(dIn$score_scaled_ecdf, dInSample_interp$y), 4)\n      ), \n      size = 6, \n      color = \"orange\"\n      ) +\n    labs(x = \"\", y = \"Emp cumul dist\") +\n    # smaller font size for ggtitle \n    ggtitle(\"Linear interpolation of subsampled flow\") +\n    theme_publication(base_size = base_size_in) +\n    theme(plot.title = element_text(size = rel(0.8)))\n    \n  fig_smooth_gam &lt;- ggplot(dIn, aes(score_scaled, score_scaled_ecdf)) + \n    geom_line() +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    geom_line(aes(x, y), color = \"orange\", size = 1.5, data = dInSample_gam) +\n    geom_text(\n      aes(x = -1.5, y = 0.9), \n      label = paste0(\n        \"Difference in area = \", \n        round(getECDF_diff(dIn$score_scaled_ecdf, dInSample_gam$y), 4)\n      ),\n      size = 6, \n      color = \"orange\"\n      ) +\n    labs(x = \"Black = scaled image score, Orange = subsampled flow\", y = \"Emp cumul dist\") +\n    ggtitle(\"GAM smooth of subsampled flow\") +\n    theme_publication(base_size = base_size_in) +\n    theme(plot.title = element_text(size = rel(0.8)))\n  \n  return(\n    list(\n      fig_smooth_interpolate=fig_smooth_interpolate,\n      fig_smooth_gam=fig_smooth_gam\n    )\n  )\n}\n\n\nplotSubSample &lt;- function(dIn0, numSample, num_pred_points = 100, base_size_in = 12) {\n\n   dIn &lt;- dIn0 |&gt; \n     dplyr::select(\n      flow_cfs_log10_scaled, \n      flow_cfs_log10_scaled_ecdf,\n      score_scaled, \n      score_scaled_ecdf\n    )\n\n  # subsample dIn  \n  dInSample &lt;- sample_n(dIn, numSample) \n\n  #############################################\n  # without anchors  \n  dInSample_no_anchors &lt;- dInSample\n  \n  # Observed data - these data are the same with or without anchors\n  get_observed_data_figs &lt;- get_observed_data_figs(dIn, dInSample_no_anchors, base_size = base_size_in)\n  figs_observed_data &lt;- get_observed_data_figs$fig_all \n\n  # Interploated or smoothed data\n  dInSample_interp_no_anchors &lt;- get_preds_interp(dInSample_no_anchors, num_pred_points)\n  dInSample_gam_no_anchors &lt;- get_preds_gam(dInSample_no_anchors, num_pred_points)\n                                                \n  get_smoothed_data_figs_no_anchors &lt;- get_smoothed_data_figs(dIn, dInSample, dInSample_interp_no_anchors, dInSample_gam_no_anchors, base_size = base_size_in)\n  \n  \n  figs_smoothed_data_no_anchors &lt;- ggarrange(\n    get_smoothed_data_figs_no_anchors$fig_smooth_interpolate, \n    #get_smoothed_data_figs_no_anchors$fig_smooth_binomial, \n    get_smoothed_data_figs_no_anchors$fig_smooth_gam, \n    ncol = 1, nrow = 2\n  )\n  \n  #############################################\n  # with anchors  \n  \n  # add in min and max flow samples for anchors\n  # \n  get_quantile_value &lt;- function(d, quant) {\n     q &lt;- quantile(d, quant) \n     row_n &lt;-  min(which(abs(d - q) == min(abs(d - q)))) # min to get 'unique' row number\n     return(d[row_n])\n  }\n\n  dInSample_with_anchors &lt;- rbind(\n    dInSample, \n    dIn |&gt; \n      filter(flow_cfs_log10_scaled == get_quantile_value(flow_cfs_log10_scaled, 0.01)) |&gt; \n      filter(score_scaled == get_quantile_value(score_scaled, 0.01)),\n    dIn |&gt; \n      filter(flow_cfs_log10_scaled == get_quantile_value(flow_cfs_log10_scaled, 0.99)) |&gt; \n      filter(score_scaled == get_quantile_value(score_scaled, 0.99))\n  )\n  \n  # Observed data - these data are the same with or without anchors\n  get_observed_data_figs_with_anchors &lt;- get_observed_data_figs(dIn, dInSample_with_anchors, base_size = base_size_in)\n  figs_observed_data_with_anchors &lt;- get_observed_data_figs_with_anchors$fig_all \n\n  # Interpolated or smoothed data\n  dInSample_interp_with_anchors &lt;- get_preds_interp(dInSample_with_anchors, num_pred_points)\n  dInSample_gam_with_anchors &lt;- get_preds_gam(dInSample_with_anchors, num_pred_points)\n                                                \n  get_smoothed_data_figs_with_anchors &lt;- get_smoothed_data_figs(dIn, dInSample_with_anchors, dInSample_interp_with_anchors, dInSample_gam_with_anchors, base_size = base_size_in)\n  \n  # \n  figs_smoothed_data_with_anchors &lt;- ggarrange(\n    get_smoothed_data_figs_with_anchors$fig_smooth_interpolate, \n    #get_smoothed_data_figs_with_anchors$fig_smooth_binomial, \n    get_smoothed_data_figs_with_anchors$fig_smooth_gam, \n    ncol = 1, nrow = 2\n  )\n  \n  return(\n    list(\n      figs_observed_data=figs_observed_data, \n      figs_smoothed_data_no_anchors=figs_smoothed_data_no_anchors,\n      figs_smoothed_data_with_anchors=figs_smoothed_data_with_anchors\n    )\n  )\n  \n}\n\n\n\nWest Brook0Avery Brook BridgePatroon CreekGreen RiverAvery Brook side\n\n\n\n2.5.0.1 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.2 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.3 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.4 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.5 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dWB0, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndAB &lt;- d |&gt; filter(station_name == \"Avery Brook_Bridge_01171000\") \n\n\n\n2.5.0.6 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.7 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.8 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.9 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.10 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dAB, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndPC &lt;- d |&gt; filter(station_name == \"01359135_Patroon Creek\") \n\n\n\n2.5.0.11 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.12 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.13 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.14 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.15 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dPC, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndGR &lt;- d |&gt; filter(station_name == \"Green River_01170100\") \n\n\n\n2.5.0.16 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.17 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.18 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.19 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.20 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dGR, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndABs &lt;- d |&gt; filter(station_name == \"Avery Brook_Side_01171000\") \n\n\n\n2.5.0.21 100 samples\nFirst set of graphs does not include min/max flow anchors, second set does.\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dABs, 100)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.22 10 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dABs, 10)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.23 7 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dABs, 7)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.24 4 subsamples\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dABs, 4)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors\n\n\n\n\n\n\n\n\n\n\n\n2.5.0.25 3 subsample\n\n\nCode\ndummy &lt;- 2\nplotSubSample(dABs, 3)\n\n\n$figs_observed_data\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_no_anchors\n\n\n\n\n\n\n\n\n\n\n$figs_smoothed_data_with_anchors",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#simulate-area-differences",
    "href": "realData.html#simulate-area-differences",
    "title": "2  Real data",
    "section": "2.6 Simulate area differences",
    "text": "2.6 Simulate area differences\n\n\nCode\n# repeating functions here for Quarto\n get_preds_gam_sim &lt;- function(dIn, num_pred_points = 100) {\n  mod &lt;- loess(flow_cfs_log10_scaled_ecdf ~ flow_cfs_log10_scaled, data = dIn)\n  \n  x &lt;- seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)\n  df &lt;- data.frame(\n    x = x,\n    y = predict(mod, x)\n  )\n  return(df)\n}\n\nget_preds_interp_sim &lt;- function(dIn, num_pred_points = 100) {\n  df &lt;- data.frame(\n    approx(\n      dIn$flow_cfs_log10_scaled, \n      dIn$flow_cfs_log10_scaled_ecdf, \n      xout = seq(min(dIn$flow_cfs_log10_scaled), max(dIn$flow_cfs_log10_scaled), length.out = num_pred_points)\n    )\n  )\n  return(df)\n}\n\nget_quantile_value_sim &lt;- function(d, quant) {\n   q &lt;- quantile(d, quant) \n   row_n &lt;-  min(which(abs(d - q) == min(abs(d - q)))) # min to get 'unique' row number\n   return(d[row_n])\n}\n\n\n\nn_rep &lt;- 100\nsim_diffs_out &lt;- data.frame()\ndummy_sim &lt;- 1\n\nfor(s in unique(d2$station_name)) {\n  for(anchor_tf in c(TRUE, FALSE)) {\n    for(n in c(100,75,50,25,10,8,6,4,2)) {\n      #print(c(s,anchor_tf,n))\n      for(rep in seq(1, n_rep)) {\n       \n        dIn &lt;- d2 |&gt; filter(station_name == s)\n        dInSample0 &lt;- sample_n(dIn, n) \n        \n        if(anchor_tf) {\n            dInSample &lt;- rbind(\n              dInSample0, \n              dIn |&gt; \n                filter(flow_cfs_log10_scaled == get_quantile_value_sim(flow_cfs_log10_scaled, 0.01)) |&gt; \n                filter(score_scaled == get_quantile_value_sim(score_scaled, 0.01)),\n              dIn |&gt; \n                filter(flow_cfs_log10_scaled == get_quantile_value_sim(flow_cfs_log10_scaled, 0.99)) |&gt; \n                filter(score_scaled == get_quantile_value_sim(score_scaled, 0.99))\n            )\n        } \n        else {\n          dInSample &lt;- dInSample0\n        }\n        \n        if(n &gt;= 4 | anchor_tf) {\n          dInSample_interp &lt;- get_preds_interp_sim(dInSample, n)\n          area_diff_interp &lt;- getECDF_diff(dIn$score_scaled_ecdf, dInSample_interp$y)\n          \n          dInSample_gam &lt;- get_preds_gam_sim(dInSample, n)\n          area_diff_gam &lt;- getECDF_diff(dIn$score_scaled_ecdf, dInSample_gam$y)\n          \n          sim_diffs_out &lt;- bind_rows(\n            sim_diffs_out,\n            data.frame(station_name=s, anchor_tf=anchor_tf, n = n, rep = rep, area_diff_interp = area_diff_interp, area_diff_gam = area_diff_gam)\n          )\n        }\n        #print(c(s,anchor_tf,n,rep))\n      }\n    }\n  }\n}\n\n\n\n2.6.1 Graph area differences\n\n2.6.1.1 Linear interpolation between flow points\n\n\nCode\ndummy &lt;- 2\n\nggplot(sim_diffs_out, aes(n, area_diff_interp, color = anchor_tf)) +\n  geom_jitter(width = 0.5) +\n  geom_smooth(method = \"gam\", \n              formula = y ~ s(x, bs = \"cs\", k = 3), se = FALSE) +\n  #geom_smooth(method = \"lm\", \n  #            formula = y ~ x + I(x^2),  \n  #            se = FALSE) +\n  #scale_y_log10() +\n  facet_wrap(~station_name, scales = \"free\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\n\n\n2.6.1.2 GAM fit across flow points\n\n\nCode\ndummy &lt;- 2\n\nggplot(sim_diffs_out, aes(n, area_diff_gam, color = anchor_tf)) +\n  geom_jitter(width = 0.5) +\n  geom_smooth(method = \"gam\", \n              formula = y ~ s(x, bs = \"cs\", k = 3), se = FALSE) +\n  facet_wrap(~station_name, scales = \"free\") +\n  theme_publication()\n\n\n\n\n\n\n\n\n\n\n\nCode\nhist(dWB0$flow_cfs_log10)\n\n\n\n\n\n\n\n\n\nCode\nhist(dWB0$flow_cfs)\n\n\n\n\n\n\n\n\n\nCode\nrelFlow_WB0 &lt;- data.frame(\n  value = dWB0$rank_pred, \n  ecdf = getECDF(dWB0$rank_pred)\n  ) |&gt; \n  mutate(\n    value0_100 = (value - min(value)) / (max(value) - min(value))\n  )\n\n\nggplot(relFlow_WB0, aes(value0_100, ecdf)) +\n  geom_point() +\n  labs(x = \"Relative flow from FPE scores\") +\n  theme_publication()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  },
  {
    "objectID": "realData.html#plot-scoresranks",
    "href": "realData.html#plot-scoresranks",
    "title": "2  Real data",
    "section": "2.7 Plot Scores/ranks",
    "text": "2.7 Plot Scores/ranks\n\n2.7.1 West Brook 0\n\n\nCode\nkappas &lt;- estimate_kappa_params(dWB0$flow_cfs_log10)\n# [1] -0.7751903  3.1289847  0.7443434  0.8989118\nflow_kappa &lt;- data.frame(\n  flow = dWB0$flow_cfs_log10,\n  x = pkappa4(\n    dWB0$flow_cfs_log10,\n    kappas[3],\n    kappas[4],\n    kappas[2],\n    kappas[1]\n  )\n)\n\n\nggplot(flow_kappa, aes(flow)) +\n  geom_histogram() + \n  geom_histogram(aes(x), color = \"orange\")\n\n\n\n\n\n\n\n\n\nCode\nhist(dWB0$flow_cfs_log10)\n\n\n\n\n\n\n\n\n\nCode\n#curve(dkappa4(dWB0$flow_cfs_log10, kappas[3], kappas[4],kappas[2],kappas[1]), add=TRUE, col='red4', lwd=2)\n\n\n\n\nx&lt;-rkappa4(1000,1,.2,12,10) \nhist(x,freq=FALSE,col='gray',border='white') \ncurve(dkappa4(x,.1,.2,12,110),add=TRUE,col='red4',lwd=2)\n\n\n\n\n\n\n\n\n\nCode\n#https://rdrr.io/cran/lmomco/man/parkap.html\nlmr &lt;- lmoms(dWB0$flow_cfs_log10)\nparkap(lmr)\n\n\n$type\n[1] \"kap\"\n\n$para\n         xi       alpha       kappa           h \n 0.81233110  0.73677738  0.58117525 -0.09269592 \n\n$source\n[1] \"parkap\"\n\n$support\n   lower    upper \n    -Inf 2.080068 \n\n$message\n[1] \"\"\n\n$ifail\n[1] 0\n\n$ifailtext\n[1] \"Successful parameter estimation.\"\n\n\nCode\n#ojs_define(dWB0_OJS = transpose(dWB0))\n\n#  facet_wrap(~data_group)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Real data</span>"
    ]
  }
]