[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Relative to absolute flow",
    "section": "",
    "text": "1 Introduction"
  },
  {
    "objectID": "realData.html#get-data",
    "href": "realData.html#get-data",
    "title": "2  Real data",
    "section": "2.1 Get data",
    "text": "2.1 Get data\n\n\nCode\nd &lt;- read.csv('./data/in/concatenated_predictions.csv') |&gt; \n  mutate(flow_cfs_log10 = log10(flow_cfs))"
  },
  {
    "objectID": "realData.html#plot-raw-data",
    "href": "realData.html#plot-raw-data",
    "title": "2  Real data",
    "section": "2.2 Plot raw data",
    "text": "2.2 Plot raw data\nLogistic is blue line and gam is green line. Regressions are across data_group. Grouped by site.\n\n\nCode\nggplot(d |&gt; filter(!is.na(flow_cfs_log10)), aes(flow_cfs_log10, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.025) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Predicted percentile\", x = \"Observed flow (log10(cfs)\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\nPick sites that seem to have enough data to get predictions\n\n\nCode\nstationsToUse &lt;- c(12, 29, 65, 80)\n\nd2 &lt;- d |&gt; \n  filter(\n    !is.na(flow_cfs_log10), \n    station_id %in% stationsToUse\n  )\n\nggplot(d2, aes(flow_cfs_log10, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Predicted percentile\", x = \"Observed flow (log10(cfs)\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\nCode\nggplot(d2, aes(scale(flow_cfs_log10), scale(score))) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(y = \"Score, scaled\", x = \"Observed flow (log10(cfs), scaled\") +\n  theme_publication() +\n  facet_wrap(~station_name, scales = \"free\")\n\n\n\n\n\n\n2.2.1 West Brook 0"
  },
  {
    "objectID": "realData.html#plot-scoresranks",
    "href": "realData.html#plot-scoresranks",
    "title": "2  Real data",
    "section": "2.3 Plot Scores/ranks",
    "text": "2.3 Plot Scores/ranks\nFocus on West Brook 0\n\n\nCode\ndWB0 &lt;- d |&gt; \n  filter(\n    !is.na(flow_cfs_log10), \n    station_name %in% \"West Brook 0_01171100\"\n  ) |&gt; \n  mutate(\n   flow_cfs_log10_scaled = scale(flow_cfs_log10), \n   score_scaled = scale(score)\n  )\n\n\n#ojs_define(dWB0_OJS = transpose(dWB0))\n\nggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs)\", y = \"Score\") +\n  theme_publication()\n\n\n\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10_scaled, score_scaled)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs), scaled\", y = \"Score, scaled\") +\n  theme_publication()\n\n\n\n\n\nCode\nggplot(dWB0, aes(rank_obs, rank_pred)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Ranked flow\", y = \"Ranked score\") +\n  theme_publication()\n\n\n\n\n\nCode\nggplot(dWB0, aes(flow_cfs_log10, score)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  #geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Observed flow (log10(cfs)\", y = \"score\") +\n  theme_publication() +\n  facet_wrap(~data_group)\n\n\n\n\n\nCode\nggplot(dWB0, aes(rank_pred, score)) +\n  geom_point(aes(color = data_group), alpha = 0.1) +\n # geom_point(aes(rank_obs,flow_cfs,color = data_group), alpha = 0.1) +\n  \n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n # geom_smooth(method = \"glm\", method.args= list(family=\"binomial\"), se = FALSE) +\n  geom_smooth(color = \"darkgreen\", se = FALSE) +\n  labs(x = \"Ranked score\", y = \"Score\") +\n  theme_publication() \n\n\n\n\n\nCode\n#  facet_wrap(~data_group)"
  },
  {
    "objectID": "realData.html#plot-ecdf",
    "href": "realData.html#plot-ecdf",
    "title": "2  Real data",
    "section": "2.4 Plot ECDF",
    "text": "2.4 Plot ECDF\n\n\nCode\nfn_ecdf_WB0 &lt;- ecdf(dWB0$score)\nplot(fn_ecdf_WB0)\n\n\n\n\n\nCode\nggplot(dWB0, aes(score)) + \n  stat_ecdf(geom = \"step\") +\n  theme_publication()\n\n\n\n\n\nCode\n  #stat_ecdf(aes(flow_cfs), color = \"blue\")\n\nggplot(dWB0, aes(score_scaled)) + \n  stat_ecdf(geom = \"step\") +\n  stat_ecdf(aes(flow_cfs_log10_scaled), color = \"blue\") +\n  theme_publication() \n\n\n\n\n\n\n2.4.1 Subsample flow data\n\n\nCode\nfn_ecdf_flow &lt;- ecdf(dWB0$flow_cfs_log10_scaled)\ndWB0$flow_cfs_log10_scaled_ecdf = fn_ecdf_flow(dWB0$flow_cfs_log10_scaled)\n\nplotSubSample &lt;- function(dIn, numSample){\n  #numSample &lt;- 10\n  dInSample &lt;- sample_n(dIn, numSample)\n\n  ggplot(dIn, aes(score_scaled)) + \n    stat_ecdf(geom = \"step\") +\n    stat_ecdf(aes(flow_cfs_log10_scaled), color = \"blue\") +\n    geom_point(aes(flow_cfs_log10_scaled, flow_cfs_log10_scaled_ecdf), color = \"orange\", size = 4, data = dInSample) +\n    #stat_ecdf(aes(flowScaled), color = \"orange\", data = flowSample) +\n    #stat_ecdf(aes(flow_cfs_log10_scaled), color = \"orange\", geom = \"point\", size = 3, data = flowSample) +\n    #stat_ecdf(aes(flow_cfs_log10_scaled), color = \"orange\", geom = \"smooth\", data = flowSample) +\n    labs(x = \"Scaled value, blue = flow, black = image score\", y = \"Empirical cumulative distribution\") +\n    theme_publication() \n}\n\nplotSubSample(dWB0, 10)\n\n\n\n\n\nCode\nplotSubSample(dWB0, 5)\n\n\n\n\n\nCode\nplotSubSample(dWB0, 5)\n\n\n\n\n\nCode\nrelFlow_WB0 &lt;- data.frame(\n  value = dWB0$rank_pred, \n  ecdf = fn_ecdf_WB0(dWB0$rank_pred)\n  ) |&gt; \n  mutate(\n    value0_100 = (value - min(value)) / (max(value) - min(value))\n  )\n\n\nggplot(relFlow_WB0, aes(value0_100, ecdf)) +\n  geom_point() +\n  labs(x = \"Relative flow from FPE scores\") +\n  theme_publication()"
  },
  {
    "objectID": "simulation.html#explore-params",
    "href": "simulation.html#explore-params",
    "title": "3  Simulations",
    "section": "3.1 Explore params",
    "text": "3.1 Explore params\nSmaller shape = more extreme flows\nSmaller scale = lower flows\n\n\nCode\nparams &lt;- list(\n  n = 500,\n  shape = 1,\n  scale = 1,\n  logECDF = TRUE\n)\n\nd_1_1 &lt;- plotFlows(params)\nd_1_1$plots\n\n\n\n\n\n\n\nCode\nparams &lt;- list(\n  n = 500,\n  shape = 1.50,\n  scale = 2,\n  logECDF = TRUE\n)\n\nd_15_2 &lt;- plotFlows(params)\nd_15_2$plots\n\n\n\n\n\n\n\nCode\nparams &lt;- list(\n  n = 500,\n  shape = 2.5,\n  scale = 1,\n  logECDF = TRUE\n)\n\nd_25_1 &lt;- plotFlows(params)\nd_25_1$plots\n\n\n\n\n\n\n\nCode\nparams &lt;- list(\n  n = 500,\n  shape = 5,\n  scale = .5,\n  logECDF = TRUE\n)\n\nd_5_05 &lt;- plotFlows(params)\nd_5_05$plots"
  },
  {
    "objectID": "simulation.html#two-distributions",
    "href": "simulation.html#two-distributions",
    "title": "3  Simulations",
    "section": "3.2 Two distributions",
    "text": "3.2 Two distributions\nAssume the FPE scores follow the d_1_1 distribution. Generate df for ecdf and scale from 0-100.\nAssume we have absolute flow values as in d_15_2.\n\n\nCode\nfn_ecdf &lt;- ecdf(d_1_1$ecdf$value)\n\nrelFlow &lt;- data.frame(\n  value = d_1_1$ecdf$value, \n  ecdf = fn_ecdf(d_1_1$ecdf$value)\n  ) |&gt; \n  mutate(\n    value0_100 = (value - min(value)) / (max(value) - min(value))\n  )\n\n(\ngRelFlow &lt;- ggplot(relFlow, aes(value0_100, ecdf)) +\n  geom_point() +\n  labs(x = \"Relative flow from FPE scores\") +\n  theme_publication()\n)\n\n\n\n\n\nNow we want to convert the x-axis values to actual (absolute) flow values. What is the minimum number of absolute flow observations we need to do a good job transferring the FPE relative flow scores to absolute flow?\nStart with one value from absolute flow.\n\n\nCode\nggarrange(gRelFlow, d_15_2$gECDF)\n\n\n\n\n\nCode\nflowSeq &lt;- seq(0.01,0.99,0.025)\nmap &lt;- \n  data.frame(\n    relFlow = flowSeq,\n    absFlow = log10(qkappa(flowSeq, 1.5, 2))\n  )\n\nggplot(map, aes(relFlow, absFlow)) +\n  geom_point() +\n  geom_line()"
  }
]